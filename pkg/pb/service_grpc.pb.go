// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: service.proto

package transcodding

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SampleRPC_SaveItem_FullMethodName   = "/sample.SampleRPC/SaveItem"
	SampleRPC_GetItem_FullMethodName    = "/sample.SampleRPC/GetItem"
	SampleRPC_UpdateItem_FullMethodName = "/sample.SampleRPC/UpdateItem"
	SampleRPC_DeleteItem_FullMethodName = "/sample.SampleRPC/DeleteItem"
)

// SampleRPCClient is the client API for SampleRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SampleRPCClient interface {
	SaveItem(ctx context.Context, in *SaveItemReq, opts ...grpc.CallOption) (*SaveItemRes, error)
	GetItem(ctx context.Context, in *GetItemReq, opts ...grpc.CallOption) (*GetItemRes, error)
	UpdateItem(ctx context.Context, in *UpdateItemReq, opts ...grpc.CallOption) (*UpdateItemRes, error)
	DeleteItem(ctx context.Context, in *DeleteItemReq, opts ...grpc.CallOption) (*DeleteItemRes, error)
}

type sampleRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewSampleRPCClient(cc grpc.ClientConnInterface) SampleRPCClient {
	return &sampleRPCClient{cc}
}

func (c *sampleRPCClient) SaveItem(ctx context.Context, in *SaveItemReq, opts ...grpc.CallOption) (*SaveItemRes, error) {
	out := new(SaveItemRes)
	err := c.cc.Invoke(ctx, SampleRPC_SaveItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleRPCClient) GetItem(ctx context.Context, in *GetItemReq, opts ...grpc.CallOption) (*GetItemRes, error) {
	out := new(GetItemRes)
	err := c.cc.Invoke(ctx, SampleRPC_GetItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleRPCClient) UpdateItem(ctx context.Context, in *UpdateItemReq, opts ...grpc.CallOption) (*UpdateItemRes, error) {
	out := new(UpdateItemRes)
	err := c.cc.Invoke(ctx, SampleRPC_UpdateItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleRPCClient) DeleteItem(ctx context.Context, in *DeleteItemReq, opts ...grpc.CallOption) (*DeleteItemRes, error) {
	out := new(DeleteItemRes)
	err := c.cc.Invoke(ctx, SampleRPC_DeleteItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SampleRPCServer is the server API for SampleRPC service.
// All implementations must embed UnimplementedSampleRPCServer
// for forward compatibility
type SampleRPCServer interface {
	SaveItem(context.Context, *SaveItemReq) (*SaveItemRes, error)
	GetItem(context.Context, *GetItemReq) (*GetItemRes, error)
	UpdateItem(context.Context, *UpdateItemReq) (*UpdateItemRes, error)
	DeleteItem(context.Context, *DeleteItemReq) (*DeleteItemRes, error)
	mustEmbedUnimplementedSampleRPCServer()
}

// UnimplementedSampleRPCServer must be embedded to have forward compatible implementations.
type UnimplementedSampleRPCServer struct {
}

func (UnimplementedSampleRPCServer) SaveItem(context.Context, *SaveItemReq) (*SaveItemRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveItem not implemented")
}
func (UnimplementedSampleRPCServer) GetItem(context.Context, *GetItemReq) (*GetItemRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItem not implemented")
}
func (UnimplementedSampleRPCServer) UpdateItem(context.Context, *UpdateItemReq) (*UpdateItemRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateItem not implemented")
}
func (UnimplementedSampleRPCServer) DeleteItem(context.Context, *DeleteItemReq) (*DeleteItemRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItem not implemented")
}
func (UnimplementedSampleRPCServer) mustEmbedUnimplementedSampleRPCServer() {}

// UnsafeSampleRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SampleRPCServer will
// result in compilation errors.
type UnsafeSampleRPCServer interface {
	mustEmbedUnimplementedSampleRPCServer()
}

func RegisterSampleRPCServer(s grpc.ServiceRegistrar, srv SampleRPCServer) {
	s.RegisterService(&SampleRPC_ServiceDesc, srv)
}

func _SampleRPC_SaveItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleRPCServer).SaveItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SampleRPC_SaveItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleRPCServer).SaveItem(ctx, req.(*SaveItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SampleRPC_GetItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleRPCServer).GetItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SampleRPC_GetItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleRPCServer).GetItem(ctx, req.(*GetItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SampleRPC_UpdateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleRPCServer).UpdateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SampleRPC_UpdateItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleRPCServer).UpdateItem(ctx, req.(*UpdateItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SampleRPC_DeleteItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleRPCServer).DeleteItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SampleRPC_DeleteItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleRPCServer).DeleteItem(ctx, req.(*DeleteItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SampleRPC_ServiceDesc is the grpc.ServiceDesc for SampleRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SampleRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sample.SampleRPC",
	HandlerType: (*SampleRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveItem",
			Handler:    _SampleRPC_SaveItem_Handler,
		},
		{
			MethodName: "GetItem",
			Handler:    _SampleRPC_GetItem_Handler,
		},
		{
			MethodName: "UpdateItem",
			Handler:    _SampleRPC_UpdateItem_Handler,
		},
		{
			MethodName: "DeleteItem",
			Handler:    _SampleRPC_DeleteItem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
